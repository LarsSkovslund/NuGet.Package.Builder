<?xml version="1.0" encoding="utf-8" ?>
<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
	<PropertyGroup>
		<PrepareForRunDependsOn>
      $(PrepareForRunDependsOn);
		  NugetPackageBuiler_CleanNuPkg;
      __BuildNuGetPackage;
    </PrepareForRunDependsOn>
	</PropertyGroup>

	<Target Name="__BuildNuGetPackage">
		<PropertyGroup>
			<ThisFilePath>$([System.IO.Path]::GetFullPath('$(MSBuildThisFileDirectory)..\tools\'))</ThisFilePath>
			<!-- Remove trailing backslash to not run into argument issues with .NET -->
			<FullOutputPathWithoutTrailingBackslash>$([System.IO.Path]::GetFullPath('$(OutDir)').TrimEnd('\'))</FullOutputPathWithoutTrailingBackslash>
			<ProjectDirWithoutTrailingBackslash>$([System.IO.Path]::GetFullPath('$(ProjectDir)').TrimEnd('\'))</ProjectDirWithoutTrailingBackslash>
			<NuGetPathWithoutTrailingBackslash>$([System.IO.Path]::GetFullPath('$(ThisFilePath)').TrimEnd('\'))</NuGetPathWithoutTrailingBackslash>
			
			<ForcePublish Condition="'$(PublishNuGetPackage)' == 'true'">-f</ForcePublish>
			<OverrideApiKey Condition="'$(PublishApiKey)' != ''">--apiKey $(PublishApiKey)</OverrideApiKey>
			<OverrideSource Condition="'$(PublishSource)' != ''">--source $(PublishSource)</OverrideSource>
      <OverrideSymbolSource Condition="'$(PublishSymbolSource)' != ''">--symbolSource $(PublishSymbolSource)</OverrideSymbolSource>
      <_GeneratePublishCommand Condition="'$(GeneratePublishCommand)' != ''">--createPublishCommand</_GeneratePublishCommand>

			<NuGetCommand>$(ThisFilePath)NuGet.Package.Builder.exe</NuGetCommand>
			<BuildCommand>"$(NuGetCommand)" --path "$(NuGetPathWithoutTrailingBackslash)" -r "$(ProjectName)" -t "$(TargetName)" -e $(ProjectExt) -c "$(Configuration)" -p "Configuration=$(Configuration);Platform=$(Platform)" -o "$(FullOutputPathWithoutTrailingBackslash)" -w "$(ProjectDirWithoutTrailingBackslash)" $(ForcePublish) $(OverrideApiKey) $(OverrideSource) $(OverrideSymbolSource) $(_GeneratePublishCommand)</BuildCommand>
		</PropertyGroup>

		<Message Text="$(BuildCommand)" Importance="High" />
		<Exec Command="$(BuildCommand)" LogStandardErrorAsError="true" WorkingDirectory="$(ProjectDir)" />
	</Target>

  <!-- Inject a custom target into Clean by extending CleanDependsOn -->
  <PropertyGroup>
    <CleanDependsOn> $(CleanDependsOn); NugetPackageBuiler_CleanNuPkg </CleanDependsOn>
  </PropertyGroup>
  
  <Target Name="NugetPackageBuiler_CleanNuPkg">
    <Message Text="$(ProjectDir)$(OutputPath)" Importance="High" />
    <Message Text="CustomAfterClean_NugetPackageBuiler target executed"/>
    <ItemGroup>
      <_FilesToDelete Include="$(ProjectDir)$(OutputPath)*.nupkg"/>
    </ItemGroup>
    <Delete Files="@(_FilesToDelete)"/>
  </Target>
  

</Project>
